 /// railtracks

// TODO disallow low speed trains on high speed railsways
// by disallowing speed Classes A for 250 kmh rails and ABC for unlim rails

// axle load class (not intended, for fallback only)
// A = 20 t
// B = 22,5 t
// C = 25 t
// D = 27,5 t
// E = 30 t

map_color_rail = 0x07;
map_color_ac = 0x91;
map_color_15ac = 0x9A;    // 0x80;
map_color_dc = 0xB2;      // 0x73;
map_color_15dc = 0x48;    // 0x2B;  //0xB2;
map_color_double = 0x40;  // 0xBB; // 0xBB;
map_color_metro = 0xCF;

// 2D = D + d
// 2S = A + D
// 2s = A + d (TGV)
// 3a = A + a + d (TGV-POS)
// 3D = D + d + A (ETR500)
// 4S = A + D + a + d (ETR575, ICE-3M)

#define all_broad_rails()                   \
  "RLA0", "RLA1", "RLA2", "RLA3", "RLAN",   \
          "ERA1", "ERA2", "ERA3", "ERA4",   \
  "ERa0", "ERa1", "ERa2", "ERa3", "ERa4",   \
          "ERD1", "ERD2", "ERD3",           \
  "ERd0", "ERd1", "ERd2", "ERd3",           \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_EL_broad_rails()                \
          "ERA1", "ERA2", "ERA3", "ERA4",   \
  "ERa0", "ERa1", "ERa2", "ERa3", "ERa4",   \
          "ERD1", "ERD2", "ERD3",           \
  "ERd0", "ERd1", "ERd2", "ERd3",           \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_lowspeed_broad_rails()          \
  "RLA0", "RLA1",                           \
          "ERA1",                           \
  "ERa0", "ERa1",                           \
          "ERD1",                           \
  "ERd0", "ERd1",                           \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_regspeed_broad_rails()          \
          "RLA1", "RLA2",                   \
          "ERA1", "ERA2",                   \
          "ERa1", "ERa2",                   \
          "ERD1", "ERD2",                   \
          "ERd1", "ERd2",                   \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_highspeed_broad_rails()         \
                  "RLA2", "RLA3",           \
                  "ERA2", "ERA3", "ERA4",   \
                  "ERa2", "ERa3", "ERa4",   \
                  "ERD2", "ERD3",           \
                  "ERd2", "ERd3",           \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_25AC_broad_rails()             \
          "ERA1", "ERA2", "ERA3", "ERA4",  \
 "ER2S","ER2s","ER3a","ER3D","ER4S"        \

#define all_lowspeed_25AC_broad_rails()  \
          "ERA1",                        \
 "ER2S","ER2s","ER3a","ER3D","ER4S"      \

#define all_regspeed_25AC_broad_rails()  \
          "ERA1", "ERA2",                \
 "ER2S","ER2s","ER3a","ER3D","ER4S"      \

#define all_highspeed_25AC_broad_rails()   \
                  "ERA2", "ERA3", "ERA4",  \
 "ER2S","ER2s","ER3a","ER3D","ER4S"        \

#define all_15AC_broad_rails()             \
  "ERa0", "ERa1", "ERa2", "ERa3", "ERa4",  \
 "ER3a","ER4S"                             \

#define all_lowspeed_15AC_broad_rails()  \
  "ERa0", "ERa1",                        \
 "ER3a","ER4S"                           \

#define all_regspeed_15AC_broad_rails()  \
          "ERa1", "ERa2",                \
 "ER3a","ER4S"                           \

#define all_highspeed_15AC_broad_rails()   \
                  "ERa2", "ERa3", "ERa4",  \
 "ER3a","ER4S"                             \

#define all_aAC_broad_rails()              \
          "ERA1", "ERA2", "ERA3", "ERA4",  \
  "ERa0", "ERa1", "ERa2", "ERa3", "ERa4",  \
 "ER2S","ER2s","ER3a","ER3D","ER4S"        \

#define all_lowspeed_aAC_broad_rails()  \
          "ERA1",                       \
  "ERa0", "ERa1",                       \
 "ER2S","ER2s","ER3a","ER3D","ER4S"     \

#define all_regspeed_aAC_broad_rails()  \
          "ERA1", "ERA2",               \
          "ERa1", "ERa2",               \
 "ER2S","ER2s","ER3a","ER3D","ER4S"     \

#define all_highspeed_aAC_broad_rails()    \
                  "ERA2", "ERA3", "ERA4",  \
                  "ERa2", "ERa3", "ERa4",  \
 "ER2S","ER2s","ER3a","ER3D","ER4S"        \

#define all_3DC_broad_rails()      \
          "ERD1", "ERD2", "ERD3",  \
 "ER2D","ER2S","ER3D","ER4S"       \

#define all_lowspeed_3DC_broad_rails()  \
          "ERD1",                       \
 "ER2D","ER2S","ER3D","ER4S"            \

#define all_regspeed_3DC_broad_rails()  \
          "ERD1", "ERD2",               \
 "ER2D","ER2S","ER3D","ER4S"            \

#define all_highspeed_3DC_broad_rails()  \
                  "ERD2", "ERD3",        \
 "ER2D","ER2S","ER3D","ER4S"             \

#define all_15DC_broad_rails()       \
  "ERd0", "ERd1", "ERd2", "ERd3",    \
 "ER2D","ER2s","ER3a","ER3D","ER4S"  \

#define all_lowspeed_15DC_broad_rails()  \
  "ERd0", "ERd1",                        \
 "ER2D","ER2s","ER3a","ER3D","ER4S"      \

#define all_regspeed_15DC_broad_rails()  \
          "ERd1", "ERd2",                \
 "ER2D","ER2s","ER3a","ER3D","ER4S"      \

#define all_highspeed_15DC_broad_rails()  \
                  "ERd2", "ERd3",         \
 "ER2D","ER2s","ER3a","ER3D","ER4S"       \

#define all_dDC_broad_rails()               \
          "ERD1", "ERD2", "ERD3",           \
  "ERd0", "ERd1", "ERd2", "ERd3",           \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_lowspeed_dDC_broad_rails()      \
          "ERD1",                           \
  "ERd0", "ERd1",                           \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_regspeed_dDC_broad_rails()      \
          "ERD1", "ERD2",                   \
          "ERd1", "ERd2",                   \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_highspeed_dDC_broad_rails()     \
                  "ERD2", "ERD3",           \
                  "ERd2", "ERd3",           \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_ACDC_broad_rails()              \
          "ERA1", "ERA2", "ERA3", "ERA4",   \
          "ERD1", "ERD2", "ERD3",           \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_ACdDC_broad_rails()             \
          "ERA1", "ERA2", "ERA3", "ERA4",   \
          "ERD1", "ERD2", "ERD3",           \
  "ERd0", "ERd1", "ERd2", "ERd3",           \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_AC15DC_broad_rails()            \
          "ERA1", "ERA2", "ERA3", "ERA4",   \
  "ERd0", "ERd1", "ERd2", "ERd3",           \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_aACdDC_broad_rails()            \
          "ERA1", "ERA2", "ERA3", "ERA4",   \
  "ERa0", "ERa1", "ERa2", "ERa3", "ERa4",   \
          "ERD1", "ERD2", "ERD3",           \
  "ERd0", "ERd1", "ERd2", "ERd3",           \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_lowspeed_aACdDC_broad_rails()   \
          "ERA1",                           \
  "ERa0", "ERa1",                           \
          "ERD1",                           \
  "ERd0", "ERd1",                           \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_regspeed_aACdDC_broad_rails()   \
          "ERA1", "ERA2",                   \
          "ERa1", "ERa2",                   \
          "ERD1", "ERD2",                   \
          "ERd1", "ERd2",                   \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_highspeed_aACdDC_broad_rails()  \
                  "ERA2", "ERA3", "ERA4",   \
                  "ERa2", "ERa3", "ERa4",   \
                  "ERD2", "ERD3",           \
                  "ERd2", "ERd3",           \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define all_aAC15DC_broad_rails()           \
          "ERA1", "ERA2", "ERA3", "ERA4",   \
  "ERa0", "ERa1", "ERa2", "ERa3", "ERa4",   \
  "ERd0", "ERd1", "ERd2", "ERd3",           \
 "ER2D","ER2S","ER2s","ER3a","ER3D","ER4S"  \

#define new_broad_rails(rail_name, rail_label, year, strname, strnamebase, powered, cost, RCcost, speed, colour, sort_oder, rails_graphics, fences_graphics, depots_graphics, flags)  \
item (FEAT_RAILTYPES, rail_name) {                                                                                                                                                    \
  property {                                                                                                                                                                          \
                       label: rail_label;                                                                                                                                             \
           introduction_date: date(year, 1, 1);                                                                                                                                       \
                        name: string(STR_NAME_##strname);                                                                                                                             \
             toolbar_caption: string(STR_##strname##_MENU);                                                                                                                           \
                   menu_text: string(STR_##strname##_MENU);                                                                                                                           \
        build_window_caption: string(STR_##strnamebase##_BUILD_CAPTION);                                                                                                              \
            autoreplace_text: string(STR_##strnamebase##_AUTOREPLACE);                                                                                                                \
             new_engine_text: string(STR_##strnamebase##_NEW_ENGINE);                                                                                                                 \
    compatible_railtype_list: [all_broad_rails()];                                                                                                                                    \
       powered_railtype_list: [powered##_broad_rails()];                                                                                                                              \
              railtype_flags: flags;                                                                                                                                                  \
      curve_speed_multiplier: 1;                                                                                                                                                      \
            station_graphics: RAILTYPE_STATION_NORMAL;                                                                                                                                \
           construction_cost: cost;                                                                                                                                                   \
            maintenance_cost: RCcost;                                                                                                                                                 \
                 speed_limit: speed;                                                                                                                                                  \
          acceleration_model: ACC_MODEL_RAIL;                                                                                                                                         \
                  map_colour: colour;                                                                                                                                                 \
                  sort_order: 0x90+sort_oder;                                                                                                                                         \
  }                                                                                                                                                                                   \
  graphics {                                                                                                                                                                          \
    bridge_surfaces: get_##rails_graphics##_bridge_surfaces;                                                                                                                          \
             depots: depots_graphics;                                                                                                                                                 \
             fences: fences_graphics;                                                                                                                                                 \
                gui: rails_graphics##_gui;                                                                                                                                            \
        precombined: get_##rails_graphics##_precombined;                                                                                                                              \
    level_crossings: get_##rails_graphics##_level_crossings;                                                                                                                          \
      track_overlay: get_##rails_graphics##_track_overlay;                                                                                                                            \
            tunnels: get_##rails_graphics##_tunnels;                                                                                                                                  \
           underlay: get_##rails_graphics##_underlay;                                                                                                                                 \
  }                                                                                                                                                                                   \
}                                                                                                                                                                                     \

#define electric_rails(rail_name, catenary_graphics)       \
item (FEAT_RAILTYPES, rail_name) {                         \
  graphics {                                               \
    catenary_pylons: catenary_graphics##_catenary_pylons;  \
      catenary_wire: catenary_graphics##_catenary_wire;    \
  }                                                        \
}                                                          \

// never rails
item (FEAT_RAILTYPES, rlan) {
  property {
                       label: "RAIL";
    compatible_railtype_list: [all_broad_rails(), "RAIL", "ELRL"];
       powered_railtype_list: [all_broad_rails(), "RAIL", "ELRL"];
              railtype_flags: bitmask(RAILTYPE_FLAG_HIDDEN);
  }
}
item (FEAT_RAILTYPES, elrn) {
  property {
                       label: "ELRL";
    compatible_railtype_list: [all_broad_rails(), "RAIL", "ELRL"];
       powered_railtype_list: [all_EL_broad_rails(), "ELRL"];
              railtype_flags: bitmask(RAILTYPE_FLAG_HIDDEN);
  }
}
item (FEAT_RAILTYPES, monorail) {
  property {
                       label: "MONO";
    compatible_railtype_list: ["MONO"];
       powered_railtype_list: ["MONO"];
              railtype_flags: bitmask(RAILTYPE_FLAG_HIDDEN);
  }
}
item (FEAT_RAILTYPES, maglev) {
  property {
                       label: "MGLV";
    compatible_railtype_list: ["MGLV"];
       powered_railtype_list: ["MGLV"];
              railtype_flags: bitmask(RAILTYPE_FLAG_HIDDEN);
  }
}

if (speedlimit_mode == 2) {
  new_broad_rails(rla1, "RLA1", 1880, RLA1, RAIL, all,   64,  2, 0 km/h, map_color_rail+2, 0x01, rail1, fences_none, rail1_depots, 0)  // Unelectrified rails
  if ((gauge_mode == 0) || (gauge_mode == 1)) {
    item (FEAT_RAILTYPES, rla1) { property {
      alternative_railtype_list: ["BAAN", "BABN", "BACN", "BADN", "BAEN",
                                  "SAAN", "SABN", "SACN", "SADN", "SAEN"]; } }
  }
  if (gauge_mode == 2) {
    item (FEAT_RAILTYPES, rla1) { property {
      alternative_railtype_list: ["BAAN", "BABN", "BACN", "BADN", "BAEN"]; } }
  }
  if (gauge_mode == 3) {
    item (FEAT_RAILTYPES, rla1) { property {
      alternative_railtype_list: ["SAAN", "SABN", "SACN", "SADN", "SAEN"]; } }
  }
}

if ((speedlimit_mode == 0) || (speedlimit_mode == 1) || (speedlimit_mode == 3)) {

  if (speedlimit_mode <= 1) {
    new_broad_rails(rla0, "RLA0", 1800, RLA0, RAIL, all,   49,  2,  60 km/h, map_color_rail+0, 0x00, rail0, fences_none, rail1_depots, bitmask(RAILTYPE_FLAG_PRECOMBINED))                                   // Unelectrified Industrial rails
    new_broad_rails(rla1, "RLA1", 1880, RLA1, RAIL, all,   64,  2, 100 km/h, map_color_rail+2, 0x01, rail1, fences_none, rail1_depots, bitmask(RAILTYPE_FLAG_PRECOMBINED))                                   // Unelectrified rails
    new_broad_rails(rla2, "RLA2", 1920, RLA2, RAIL, all,  128,  4, 140 km/h, map_color_rail+4, 0x02, rail2, fences_none, rail1_depots, bitmask(RAILTYPE_FLAG_PRECOMBINED))                                   // Unelectrified Trunk rails
    new_broad_rails(rla3, "RLA3", 1930, RLA3, RAIL, all,  256,  8, 250 km/h, map_color_rail+6, 0x03, rail3, fences,      rail4_depots, bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_NO_LEVEL_CROSSING))  // Unelectrified High-speed rails
  }
  if (speedlimit_mode == 3) {
    new_broad_rails(rla0, "RLA0", 1800, RLA0, RAIL, all_lowspeed,   49,  2,  60 km/h, map_color_rail+0, 0x00, rail0, fences_none, rail1_depots, bitmask(RAILTYPE_FLAG_PRECOMBINED))                                   // Unelectrified Industrial rails
    new_broad_rails(rla1, "RLA1", 1880, RLA1, RAIL, all_lowspeed,   64,  2, 100 km/h, map_color_rail+2, 0x01, rail1, fences_none, rail1_depots, bitmask(RAILTYPE_FLAG_PRECOMBINED))                                   // Unelectrified rails
    new_broad_rails(rla2, "RLA2", 1920, RLA2, RAIL, all_regspeed,  128,  4, 140 km/h, map_color_rail+4, 0x02, rail2, fences_none, rail1_depots, bitmask(RAILTYPE_FLAG_PRECOMBINED))                                   // Unelectrified Trunk rails
    new_broad_rails(rla3, "RLA3", 1930, RLA3, RAIL, all_highspeed, 256,  8, 250 km/h, map_color_rail+6, 0x03, rail3, fences,      rail4_depots, bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_NO_LEVEL_CROSSING))  // Unelectrified High-speed rails
  }
  if ((gauge_mode == 0) || (gauge_mode == 1)) {
    item (FEAT_RAILTYPES, rla0) { property {
      alternative_railtype_list: ["BAAN", "BABN", "BACN", "BADN", "BAEN",
                                  "SAAN", "SABN", "SACN", "SADN", "SAEN"]; } }
    item (FEAT_RAILTYPES, rla1) { property {
      alternative_railtype_list: ["BBAN", "BBBN", "BBCN", "BBDN", "BBEN",
                                  "SBAN", "SBBN", "SBCN", "SBDN", "SBEN"]; } }
    item (FEAT_RAILTYPES, rla2) { property {
      alternative_railtype_list: ["BDAN", "BDBN", "BDCN", "BDDN", "BDEN",  "BCAN", "BCBN", "BCCN", "BCDN", "BCEN",
                                  "SDAN", "SDBN", "SDCN", "SDDN", "SDEN",  "SCAN", "SCBN", "SCCN", "SCDN", "SCEN"]; } }
    item (FEAT_RAILTYPES, rla3) { property {
      alternative_railtype_list: ["BEAN", "BEBN", "BECN",
                                  "SEAN", "SEBN", "SECN"]; } }
    item (FEAT_RAILTYPES, rlan) { property {
      alternative_railtype_list: ["RLAN"]; } }
  }
  if (gauge_mode == 2) {
    item (FEAT_RAILTYPES, rla0) { property {
      alternative_railtype_list: ["BAAN", "BABN", "BACN", "BADN", "BAEN"]; } }
    item (FEAT_RAILTYPES, rla1) { property {
      alternative_railtype_list: ["BBAN", "BBBN", "BBCN", "BBDN", "BBEN"]; } }
    item (FEAT_RAILTYPES, rla2) { property {
      alternative_railtype_list: ["BDAN", "BDBN", "BDCN", "BDDN", "BDEN",  "BCAN", "BCBN", "BCCN", "BCDN", "BCEN"]; } }
    item (FEAT_RAILTYPES, rla3) { property {
      alternative_railtype_list: ["BEAN", "BEBN", "BECN"]; } }
    item (FEAT_RAILTYPES, rlan) { property {
      alternative_railtype_list: ["RLAN"]; } }
  }
  if (gauge_mode == 3) {
    item (FEAT_RAILTYPES, rla0) { property {
      alternative_railtype_list: ["SAAN", "SABN", "SACN", "SADN", "SAEN"]; } }
    item (FEAT_RAILTYPES, rla1) { property {
      alternative_railtype_list: ["SBAN", "SBBN", "SBCN", "SBDN", "SBEN"]; } }
    item (FEAT_RAILTYPES, rla2) { property {
      alternative_railtype_list: ["SDAN", "SDBN", "SDCN", "SDDN", "SDEN",  "SCAN", "SCBN", "SCCN", "SCDN", "SCEN"]; } }
    item (FEAT_RAILTYPES, rla3) { property {
      alternative_railtype_list: ["SEAN", "SEBN", "SECN"]; } }
    item (FEAT_RAILTYPES, rlan) { property {
      alternative_railtype_list: ["RLAN"]; } }
  }
}

// Use currents_mode 1 if currents_mode is 0 or 4 and xUSSR set is not loaded
if ((currents_mode == 1) || (currents_mode == 0) || (currents_mode == 4) || (currents_mode == 5) ) {
// All (A a D d) rails mode
  #include "railtrack-mode1.pnml"
}
if (currents_mode == 2) {
// E rails mode
  #include "railtrack-mode2.pnml"
}
if (currents_mode == 3) {
// A / D rails mode
  #include "railtrack-mode3.pnml"
}

// Adjust for xUSSR Railways Set.
if (((grf_future_status("AKA\08")) ||
     /* (grf_future_status("Meo\B0")) || */  // B0 is add-on, has its own rails
     /* (grf_future_status("Meo\B1")) || */  // B1 is a railsway set, skipped
     (grf_future_status("Meo\B2")) ||
     (grf_future_status("Meo\B3")) ||
     (grf_future_status("Meo\B4")) ||
     (grf_future_status("Meo\B5")) ||
     (grf_future_status("Meo\B6")) /* ||
      (grf_future_status("Meo\B7"))  // wagons are ignored, because they can't be used without locomotives
      (grf_future_status("Meo\B8"))  // wagons are ignored, because they can't be used without locomotives
*/    ) && ((currents_mode == 0) || (currents_mode == 4))) {

// if the set is split (whole set file is not loaded), only required rails types shoud be available
// By default remove all the tracks
    xUSSRset_disable_steamer      = 1;
    xUSSRset_disable_diesel       = 1;
    xUSSRset_disable_acelectric   = 1;
    xUSSRset_disable_dcelectric   = 1;
    xUSSRset_disable_acdcelectric = 1;
    xUSSRset_disable_dmu          = 1;
    xUSSRset_disable_acemu        = 1;
    xUSSRset_disable_dcemu        = 1;
    xUSSRset_disable_acdcemu      = 1;

// If the whole set loaded, use its' parameters
  if (grf_future_status("AKA\08")) {
      xUSSRset_disable_steamer      = (param["AKA\08", 2] >> 0) & 0x01;
      xUSSRset_disable_diesel       = (param["AKA\08", 2] >> 1) & 0x01;
      xUSSRset_disable_acelectric   = (param["AKA\08", 2] >> 2) & 0x01;
      xUSSRset_disable_dcelectric   = (param["AKA\08", 2] >> 3) & 0x01;
      xUSSRset_disable_acdcelectric = (param["AKA\08", 2] >> 4) & 0x01;
      xUSSRset_disable_dmu          = (param["AKA\08", 2] >> 5) & 0x01;
      xUSSRset_disable_acemu        = (param["AKA\08", 2] >> 6) & 0x01;
      xUSSRset_disable_dcemu        = (param["AKA\08", 2] >> 7) & 0x01;
      xUSSRset_disable_acdcemu      = (param["AKA\08", 3] >> 0) & 0x01;
  }

  if (grf_future_status("Meo\B2")) {
    xUSSRset_disable_steamer      = 0;
  }
  if (grf_future_status("Meo\B3")) {
    xUSSRset_disable_diesel       = 0;
  }
  if (grf_future_status("Meo\B5")) {
    xUSSRset_disable_dmu          = 0;
  }
// electric
  if (grf_future_status("Meo\B4")) {
      xUSSRset_disable_acelectric   = (param["Meo\B4", 2] >> 2) & 0x01;
      xUSSRset_disable_dcelectric   = (param["Meo\B4", 2] >> 3) & 0x01;
      xUSSRset_disable_acdcelectric = (param["Meo\B4", 2] >> 4) & 0x01;
  }
  if (grf_future_status("Meo\B6")) {
      xUSSRset_disable_acemu        = (param["Meo\B6", 2] >> 5) & 0x01;
      xUSSRset_disable_dcemu        = (param["Meo\B6", 2] >> 6) & 0x01;
      xUSSRset_disable_acdcemu      = (param["Meo\B6", 2] >> 7) & 0x01;
  }

// ER2D is available only if DCs are not disabled
  if (!(xUSSRset_disable_dcelectric && xUSSRset_disable_dcemu)) {
    item (FEAT_RAILTYPES, er2d) { property {
      railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY); } }  // Enable ER2D
  }
  if (xUSSRset_disable_dmu && xUSSRset_disable_steamer && xUSSRset_disable_diesel) {
    item (FEAT_RAILTYPES, rla1) { property {
      railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_HIDDEN); } }
    if (speedlimit_mode != 2) {
      item (FEAT_RAILTYPES, rla0) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_HIDDEN); } }
      item (FEAT_RAILTYPES, rla2) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_HIDDEN); } }
      item (FEAT_RAILTYPES, rla3) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_HIDDEN, RAILTYPE_FLAG_NO_LEVEL_CROSSING); } }
    }
  }

  if (xUSSRset_disable_dcemu && xUSSRset_disable_dcelectric) {
    item (FEAT_RAILTYPES, er15dc1) { property {
      railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN); } }
    item (FEAT_RAILTYPES, er3dc1) { property {
      railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN); } }
    item (FEAT_RAILTYPES, er2d) { property {
      railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN); } }
    item (FEAT_RAILTYPES, er2s) { property {
      railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN); } }
    if (speedlimit_mode != 2) {
      item (FEAT_RAILTYPES, er15dc0) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN); } }
      item (FEAT_RAILTYPES, er3dc2) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN); } }
      item (FEAT_RAILTYPES, er3dc3) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN, RAILTYPE_FLAG_NO_LEVEL_CROSSING); } }
    }
  }

// if both ACs and DCs are disabled, but AC/DCs are enabled, AC rails should be avaiable
  if (xUSSRset_disable_acemu && xUSSRset_disable_acelectric &&
      (!(xUSSRset_disable_dcemu && xUSSRset_disable_dcelectric &&
       (! xUSSRset_disable_acdcemu || !xUSSRset_disable_acdcelectric)))) {
    item (FEAT_RAILTYPES, er25ac1) { property {
      railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN); } }
    item (FEAT_RAILTYPES, er2s) { property {
      railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN); } }
    if (speedlimit_mode != 2) {
      item (FEAT_RAILTYPES, er15ac0) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN); } }
      item (FEAT_RAILTYPES, er15ac1) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN); } }
      item (FEAT_RAILTYPES, er25ac2) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN); } }
      item (FEAT_RAILTYPES, er25ac3) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN, RAILTYPE_FLAG_NO_LEVEL_CROSSING); } }
    }
  }

  if (speedlimit_mode != 2) {
    if (currents_mode != 5) {
      item (FEAT_RAILTYPES, er15dc2) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN); } }
      item (FEAT_RAILTYPES, er15dc3) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN, RAILTYPE_FLAG_NO_LEVEL_CROSSING); } }
      item (FEAT_RAILTYPES, er15ac2) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN); } }
      item (FEAT_RAILTYPES, er15ac3) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN, RAILTYPE_FLAG_NO_LEVEL_CROSSING); } }
      item (FEAT_RAILTYPES, er15ac4) { property {
        railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN, RAILTYPE_FLAG_NO_LEVEL_CROSSING); } }
    }
    item (FEAT_RAILTYPES, er25ac4) { property {
      railtype_flags: bitmask(RAILTYPE_FLAG_PRECOMBINED, RAILTYPE_FLAG_CATENARY, RAILTYPE_FLAG_HIDDEN, RAILTYPE_FLAG_NO_LEVEL_CROSSING); } }
  }
}

// subway

item (FEAT_RAILTYPES, bg_metro) {
  property {
                      label: "SW1L";
          introduction_date: date(1935, 1, 1);
                       name: string(STR_NAME_R3);
            toolbar_caption: string(STR_R3_MENU);
                  menu_text: string(STR_R3_MENU);
       build_window_caption: string(STR_R3_BUILD_CAPTION);
           autoreplace_text: string(STR_R3_AUTOREPLACE);
            new_engine_text: string(STR_R3_NEW_ENGINE);
   compatible_railtype_list: ["SW1L", "SW1R", all_broad_rails()];
      powered_railtype_list: ["SW1L", "SW1R"];
             railtype_flags: bitmask(RAILTYPE_FLAG_NO_LEVEL_CROSSING, RAILTYPE_FLAG_PRECOMBINED);
     curve_speed_multiplier: 1;
           station_graphics: RAILTYPE_STATION_NORMAL;
          construction_cost: 750;
           maintenance_cost: 32;
                speed_limit: 100 km/h;
         acceleration_model: ACC_MODEL_RAIL;
                 map_colour: map_color_metro;
                 sort_order: 0xFE;
  }
  graphics {
    bridge_surfaces: get_rail_3d_bridge_surfaces;
             depots: rail_3d_depots;
             fences: fences_1435;
                gui: rail_3d_gui;
    level_crossings: get_rail_3d_level_crossings;
        precombined: get_rail_3d_precombined;
      track_overlay: get_rail_3d_track_overlay;
            tunnels: get_rail_3d_tunnels;
     tunnel_overlay: get_rail_3d_tunnel_overlays;
           underlay: get_rail_3d_underlay;
  }
}
if ((gauge_mode == 0) || (gauge_mode == 1)) {
  item (FEAT_RAILTYPES, bg_metro) { property {
    alternative_railtype_list: ["BAA3", "BAB3", "BAC3", "BAD3", "BAE3",
                                "SAA3", "SAB3", "SAC3", "SAD3", "SAE3", "3DRL", "3RDR", "MTRO"]; } }
}
if (gauge_mode == 2) {
  item (FEAT_RAILTYPES, bg_metro) { property {
    alternative_railtype_list: ["BAA3", "BAB3", "BAC3", "BAD3", "BAE3"]; } }
}
if (gauge_mode == 3) {
  item (FEAT_RAILTYPES, bg_metro) { property {
    alternative_railtype_list: ["SAA3", "SAB3", "SAC3", "SAD3", "SAE3", "3DRL", "3RDR", "MTRO"]; } }
}

item (FEAT_RAILTYPES, bg_metro_diesel) {
  property {
                      label: "SW1R";
          introduction_date: date(1935, 1, 1);
                       name: string(STR_NAME_R3B);
            toolbar_caption: string(STR_R3B_MENU);
                  menu_text: string(STR_R3B_MENU);
       build_window_caption: string(STR_R3B_BUILD_CAPTION);
           autoreplace_text: string(STR_R3B_AUTOREPLACE);
            new_engine_text: string(STR_R3B_NEW_ENGINE);
   compatible_railtype_list: ["SW1L", "SW1R", all_broad_rails()];
      powered_railtype_list: ["SW1L", "SW1R", all_broad_rails()];
             railtype_flags: bitmask(RAILTYPE_FLAG_NO_LEVEL_CROSSING, RAILTYPE_FLAG_PRECOMBINED);
     curve_speed_multiplier: 1;
           station_graphics: RAILTYPE_STATION_NORMAL;
          construction_cost: 750;
           maintenance_cost: 32;
                speed_limit: 100 km/h;
         acceleration_model: ACC_MODEL_RAIL;
                 map_colour: map_color_metro;
                 sort_order: 0xFF;
  }
  graphics {
    bridge_surfaces: get_rail_3db_bridge_surfaces;
             depots: rail_3d_depots;
             fences: fences_1435;
                gui: rail_3db_gui;
    level_crossings: get_rail_3db_level_crossings;
        precombined: get_rail_3db_precombined;
      track_overlay: get_rail_3db_track_overlay;
            tunnels: get_rail_3db_tunnels;
     tunnel_overlay: get_rail_3db_tunnel_overlays;
           underlay: get_rail_3db_underlay;
  }
}
if ((gauge_mode == 0) || (gauge_mode == 1)) {
  item (FEAT_RAILTYPES, bg_metro_diesel) { property {
    alternative_railtype_list: ["B3A3", "B3B3", "B3C3", "B3D3", "B3E3",
                                "S3A3", "S3B3", "S3C3", "S3D3", "S3E3"]; } }
}
if (gauge_mode == 2) {
  item (FEAT_RAILTYPES, bg_metro_diesel) { property {
    alternative_railtype_list: ["B3A3", "B3B3", "B3C3", "B3D3", "B3E3"]; } }
}
if (gauge_mode == 3) {
  item (FEAT_RAILTYPES, bg_metro_diesel) { property {
    alternative_railtype_list: ["S3A3", "S3B3", "S3C3", "S3D3", "S3E3"]; } }
}




/*
STR_NAME_RLA0
STR_NAME_RLA1
STR_NAME_RLA2
STR_NAME_RLA3
STR_RAIL_AUTOREPLACE
STR_RAIL_BUILD_CAPTION
STR_RAIL_NEW_ENGINE
STR_RAIL_NEW_ENGINE.gen
STR_RLA0_MENU
STR_RLA1_MENU
STR_RLA2_MENU
STR_RLA3_MENU
*/
