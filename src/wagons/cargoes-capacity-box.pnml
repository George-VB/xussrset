// плfотность груза для крытых вагонов

#define LVST_SIZE           2        // 1 stock per 2 m²
#define LVST_WASTE          12 / 10  // amount for decreasing capacity for LVST

switch (FEAT_TRAINS, SELF, box_cargo_capacity, cargo_type_in_veh)
{
// begin main block
// --- Bulk cargoes
// ----- Bulk cargoes - Clays
//   CLAY,
//   LIME,
// ----- Bulk cargoes - Ores
//   AORE,
//   CORE,
//   FECR,
//   IORE,
//   MNO2,
//   PHOS,
//   PORE,
  SULP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2085 / 4, cargo_unit_weight);
// ----- Bulk cargoes - General
//   COAL,
//   COCO,
//   COKE,
  FERT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200 / 2, cargo_unit_weight);  // в мешках. Суперфосфат порошковый 1200
  FMSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 250, cargo_unit_weight);
//   GRVL,
//   PEAT,
  RCYC: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 480, cargo_unit_weight);   // Бытовые отходы, бытовой мусор, garbage, household rubbish
  SALT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight);  // Соль пищевая тонкого помола, fine salt
//   SAND,
//   SCMT,
//   SCRP,
//   SLAG,
//   WSTE,
// --- Piece cargoes
// ----- Piece cargoes - Wood
//   BATT,
//   TWOD,
//   WDPR,
//   WOOD,
// ----- Piece cargoes - Steel
//   ALUM,
//   COPR,
//   CSTI,
//   IRON,
//   METL,
//   PIPE,
//   STAL,
//   STCB,
//   STEL,
//   STSE,
//   STSH,
//   STST,
//   STWR,
//   ZINC,
// ----- Piece cargoes - Special
//   BRCK,
// --- Piece cargoes - Large boxes
  ENSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 300, cargo_unit_weight);
  FOCA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 5000, cargo_unit_weight);  // Forging and Castings - FOCA - Штучный - Литые детали и формы
  GOOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);
  MNSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 300, cargo_unit_weight);
  POWR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 250, cargo_unit_weight);
  TYRE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);
  VBOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 250, cargo_unit_weight);
  VENG: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);
  VPTS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);
// --- Piece cargoes - Vehicles
//   VEHI,
// --- Hopper cargos
// ----- Hopper cargos - Fertilizer
  NITR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200 / 4, cargo_unit_weight);  // Селитра натриевая измельченная в мешках, ground sodium nitrate
// ----- Hopper cargos - Cement
  ALO_: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 960, cargo_unit_weight);       // Глинозем сухой в мешках
  BDMT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1540 / 2, cargo_unit_weight);  // в мешках. Цементный клинкер, cement clinker
  CBLK: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 360, cargo_unit_weight);       // Гранулированный углерод ГОСТ 7885-86 Углерод технический для производства резины. Насыпная плотность в пределах 320-400 кг/м3
  CMNT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1540, cargo_unit_weight);      // Цементный клинкер, cement clinker
  KAOL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2540 / 2, cargo_unit_weight);  // Каолинит плотность 2540—2600 кг/м³
  POTA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1280 / 2, cargo_unit_weight);  // в мешках. Калий углекислый (поташ), potash
  QLME: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 850, cargo_unit_weight);       // Негашеная известь рыхлая, lump quick lime
  SASH: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1080 / 2, cargo_unit_weight);  // Натрия карбонат в гранулах (углекислый натрий, сода кальцинированная) heavy soda ash
// ----- Hopper cargos - Grains
  CERE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);
  CTCD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 400, cargo_unit_weight);
  GRAI: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 705, cargo_unit_weight);  // Рожь, rye
  MAIZ: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 760, cargo_unit_weight);  // Зерно кукурузы, maize grain
  OLSD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 770, cargo_unit_weight);
  TOFF: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 860, cargo_unit_weight);
  WHEA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 780, cargo_unit_weight);  // Зерно пшеницы - wheat grain
// --- Liquid cargoes
// ----- Liquid cargoes - Edibles
  BEER: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 850/3, cargo_unit_weight);  // на европалетах в бутылках по 1,5 литра исходя из плотности пива 1040
  COLA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 842/3, cargo_unit_weight);  // на европалетах в бутылках по 1,5 литра исходя из плотности кока-колы 1030
  EOIL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 600, cargo_unit_weight);    // в бутылках
  FZDR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 85, cargo_unit_weight);     // в бутылках на палетах
  WATR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 820/3, cargo_unit_weight);  // на европалетах в бутылках по 1,5 литра исходя из плотности воды 1000
// ----- Liquid cargoes - Oil products
//   OIL_,
//   PETR,
//   RFPR,
// ----- Liquid cargoes - Chemicals
  BUBL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 10, cargo_unit_weight);
  COAT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 950/4, cargo_unit_weight);  // DYES
  DYES: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 950/4, cargo_unit_weight);  // 930-950
  NHNO: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 600/4, cargo_unit_weight);  // Нитрат Аммония (Аммиачная селитра) в таре
  PLAS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800/2, cargo_unit_weight);
  PLST: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800/2, cargo_unit_weight);
  RUBR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1950/4, cargo_unit_weight);
  SOAP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1111/4, cargo_unit_weight);  // Мыло в таре TODO заполнить плотность
// ----- Liquid cargoes - Dangerous & heated
  ACID: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1505/4, cargo_unit_weight);  //  Азотная кислота в таре
  CTAR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1250/4, cargo_unit_weight);  // в таре WIKI: Каменноугольная смола. Плотность 1120 ... 1250 кг /м3.
  LYE_: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1111/4, cargo_unit_weight);  // Мыло в таре TODO заполнить плотность
// ----- Liquid cargoes - Liquified gases
  C2H4: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2000/4, cargo_unit_weight);  // мономеры (этилен) в таре
  CHLO: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200/4, cargo_unit_weight);  // Соляная кислота в таре
  FUEL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 530/4, cargo_unit_weight);   // Сжиженный газ в баллонах
  H2__: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 600/4, cargo_unit_weight);   // Сжиженный водород в баллонах
  N7__: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1000/4, cargo_unit_weight);  // Сжиженный азот в баллонах
  NH3_: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 734/4, cargo_unit_weight);   // Аммиак в таре TODO заполнить плотность
  O2__: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1141/4, cargo_unit_weight);  // Жидкий кислород в таре
// --- Refregirated cargoes
//   FISH,
//   FOOD,
//   FRUI,
//   FRUT,
//   FRVG,
//   MILK,
// --- Boxcar cargoes
// ----- Boxcar cargoes - Sacks
  BEAN: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 580, cargo_unit_weight);  // Бобы касторовые Beans
  CASS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 720, cargo_unit_weight);  // Свекла, Beets
  FICR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 420, cargo_unit_weight);  // Хлопковая вата, сottonwood
  JAVA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 430, cargo_unit_weight);  // Кофейные зерна жаренные, roast coffee beans
  NUTS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 650, cargo_unit_weight);  // Арахис чищенный (земляной орех), shelled peanuts
  RSGR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 960, cargo_unit_weight);  // Сахар-сырец тростниковый, raw cane sugar
  SGBT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 560, cargo_unit_weight);  // Сахарной свеклы пульпа, wet sugarbeet pulp
  SGCN: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 270, cargo_unit_weight);  // Сахарный тростник, sugarcane
  SUGR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 850, cargo_unit_weight);  // Сахар-песок, granulated sugar
  SWET: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 430, cargo_unit_weight);
  WOOL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1310, cargo_unit_weight);  // Шерсть, волосы, wool
// ----- Boxcar cargoes - Boxes
  BOOM: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);
  CERA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight);  // Стекло органическое
  GLAS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2500, cargo_unit_weight);  // Стекло оконное, window glass
  PAPR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1201, cargo_unit_weight);  // Бумага обычная, standard paper
  PPAR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 350, cargo_unit_weight);   // Пластиковые детали в коробках
  TOYS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 40, cargo_unit_weight);
// ----- Boxcar cargoes - Livestock
  LVST: return ((yeti_on == 1) ? calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2), 1000 / LVST_SIZE / (LVST_WASTE) , cargo_unit_weight)  :
                                 calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2), 3 * 1000 / LVST_SIZE / (LVST_WASTE) / 16, cargo_unit_weight));
// --- Special cargoes
// ----- Special cargoes - Valuables & Mail
  DIAM: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 75, cargo_unit_weight);
  GOLD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 75, cargo_unit_weight);
  MAIL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 250, cargo_unit_weight);
  VALU: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 75, cargo_unit_weight);
// ----- Special cargoes - Passengers
// ------- Special cargoes - Passengers 1 class
//   TOUR,
// ------- Special cargoes - Passengers 2 class
//   PASS,
// ------- Special cargoes - Passengers 3 class
//   YETI,
//   YETY,
// ----- Special cargoes - Nuclear
//   NWST,
//   URAN,
// end main block
        return 0;
}
