// Определение скорости погрузки засыпкой из элеватора. Скорость принимающих устройств неограничена.

switch (FEAT_TRAINS, SELF, all_wagons_hopper_station_loading_speed, cargo_type_in_veh)
{
//                                     <1910 >1910 >1930 >1950 >1990
// begin main block
// --- Bulk cargoes
// ----- Bulk cargoes - Clays
  CLAY: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  LIME: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
// ----- Bulk cargoes - Ores
//   AORE,
//   CORE,
//   FECR,
//   IORE,
//   MNO2,
  PHOS: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
//   PORE,
//   SULP,
// ----- Bulk cargoes - General
//   COAL,
  COCO: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
//   COKE,
  FERT: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  FMSP: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
//   GRVL,
  PEAT: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
//   RCYC,
//   SALT,
//   SAND,
//   SCMT,
//   SCRP,
//   SLAG,
//   WSTE,
// --- Piece cargoes
// ----- Piece cargoes - Wood
//   BATT,
//   TWOD,
//   WDPR,
//   WOOD,
// ----- Piece cargoes - Steel
//   ALUM,
//   COPR,
//   CSTI,
//   IRON,
//   METL,
//   PIPE,
//   STAL,
//   STCB,
//   STEL,
//   STSE,
//   STSH,
//   STST,
//   STWR,
//   ZINC,
// ----- Piece cargoes - Special
//   BRCK,
// --- Piece cargoes - Large boxes
//   ENSP,
//   FOCA,
//   GOOD,
//   MNSP,
//   POWR,
//   TYRE,
//   VBOD,
//   VENG,
//   VPTS,
// --- Piece cargoes - Vehicles
//   VEHI,
// --- Hopper cargos
// ----- Hopper cargos - Fertilizer
//   NITR,
// ----- Hopper cargos - Cement
  ALO_: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  BDMT: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  CBLK: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  CMNT: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  KAOL: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  POTA: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  QLME: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  SASH: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
// ----- Hopper cargos - Grains
  CERE: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  CTCD: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  GRAI: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  MAIZ: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  OLSD: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  TOFF: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  WHEA: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
// --- Liquid cargoes
// ----- Liquid cargoes - Edibles
//   BEER,
//   COLA,
//   EOIL,
//   FZDR,
//   WATR,
// ----- Liquid cargoes - Oil products
//   OIL_,
//   PETR,
//   RFPR,
// ----- Liquid cargoes - Chemicals
//   BUBL,
//   COAT,
//   DYES,
//   NHNO,
//   PLAS,
//   PLST,
//   RUBR,
//   SOAP,
// ----- Liquid cargoes - Dangerous & heated
//   ACID,
//   CTAR,
//   LYE_,
// ----- Liquid cargoes - Liquified gases
//   C2H4,
//   CHLO,
//   FUEL,
//   H2__,
//   N7__,
//   NH3_,
//   O2__,
// --- Refregirated cargoes
//   FISH,
//   FOOD,
//   FRUI,
//   FRUT,
//   FRVG,
//   MILK,
// --- Boxcar cargoes
// ----- Boxcar cargoes - Sacks
//   BEAN,
//   CASS,
//   FICR,
//   JAVA,
//   NUTS,
//   RSGR,
//   SGBT,
//   SGCN,
//   SUGR,
//   SWET,
//   WOOL,
// ----- Boxcar cargoes - Boxes
//   BOOM,
//   CERA,
//   GLAS,
//   PAPR,
//   PPAR,
//   TOYS,
// ----- Boxcar cargoes - Livestock
//   LVST,
// --- Special cargoes
// ----- Special cargoes - Valuables & Mail
//   DIAM,
//   GOLD,
//   MAIL,
//   VALU,
// ----- Special cargoes - Passengers
// ------- Special cargoes - Passengers 1 class
//   TOUR,
// ------- Special cargoes - Passengers 2 class
//   PASS,
// ------- Special cargoes - Passengers 3 class
//   YETI,
//   YETY,
// ----- Special cargoes - Nuclear
//   NWST,
//   URAN,
// end main block
        return min(calculate_loading_speed(9,  13,  17,  21,  25), LOAD_TEMP(0));
}

switch (FEAT_TRAINS, SELF, all_wagons_hopper_loading_speed,
[ STORE_TEMP((LOAD_TEMP(0) == 0) + LOAD_TEMP(0), 0),                    // интерпритируем 0 как 1
  STORE_TEMP((LOAD_TEMP(1) == 0) + LOAD_TEMP(1), 1),                    // интерпритируем 0 как 1
  STORE_TEMP(min((LOAD_TEMP(2) == 0) * 255 + LOAD_TEMP(2), 255), 2),    // интерпритируем 0 как 255
  STORE_TEMP(min((LOAD_TEMP(3) == 0) * 255 + LOAD_TEMP(3), 255), 3),    // интерпритируем 0 как 255
  STORE_TEMP(min(cargo_capacity / LOAD_TEMP(0) + 1, LOAD_TEMP(2)), 0),  // переводим тики в 1 груза, берем минимум по объёму и тикам
  STORE_TEMP(min(cargo_capacity / LOAD_TEMP(1) + 1, LOAD_TEMP(3)), 1),  // переводим тики в 1 груза, берем минимум по объёму и тикам
  vehicle_is_unloading])
{
  1: return LOAD_TEMP(1);
     all_wagons_hopper_station_loading_speed;
}
