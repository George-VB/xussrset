// Определение скорости погрузки бункерной засыпкой. Скорость выгрузки задана в регистре 1
// Для штучного груза считается скорость погрузки равной скорости выгрузки
switch (FEAT_TRAINS, SELF, all_wagons_bulk_station_loading_speed,
[ STORE_TEMP(LOAD_TEMP(0) == 0 ? 255  : LOAD_TEMP(0), 0),
  cargo_type_in_veh])
{
//                                     <1910 >1910 >1930 >1950 >1990
// begin main block
// --- Bulk cargoes
// ----- Bulk cargoes - Clays
  CLAY: return min(calculate_loading_speed(5, 7, 9, 11, 13), LOAD_TEMP(0));
  LIME: return min(calculate_loading_speed(7, 10, 13, 16, 19), LOAD_TEMP(0));
// ----- Bulk cargoes - Ores
//   AORE,
//   CORE,
//   FECR,
//   IORE,
//   MNO2,
//   PHOS,
//   PORE,
//   SULP,
// ----- Bulk cargoes - General
//   COAL,
//   COCO,
//   COKE,
//   FERT,
  FMSP: return min(10, LOAD_TEMP(0));
//   GRVL,
//   PEAT,
  RCYC: return min(calculate_loading_speed(9, 14, 19, 24, 29), LOAD_TEMP(0));
//   SALT,
//   SAND,
  SCMT: return min(calculate_loading_speed(9, 14, 19, 24, 29), LOAD_TEMP(0));
  SCRP: return min(calculate_loading_speed(9, 14, 19, 24, 29), LOAD_TEMP(0));
//   SLAG,
  WSTE: return min(calculate_loading_speed(9, 14, 19, 24, 29), LOAD_TEMP(0));
// --- Piece cargoes
// ----- Piece cargoes - Wood
  BATT: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
  TWOD: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
  WDPR: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
  WOOD: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
// ----- Piece cargoes - Steel
  ALUM: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  COPR: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  CSTI: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  IRON: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  METL: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  PIPE: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
  STAL: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STCB: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STEL: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STSE: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STSH: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STST: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STWR: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  ZINC: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
// ----- Piece cargoes - Special
  BRCK: return min(calculate_loading_speed(7, 10, 13, 16, 19), LOAD_TEMP(0));
  YETI: return min(calculate_loading_speed(7, 10, 13, 16, 19), LOAD_TEMP(0));
  YETY: return min(calculate_loading_speed(7, 10, 13, 16, 19), LOAD_TEMP(0));
// --- Piece cargoes - Large boxes
  ENSP: return min(10, LOAD_TEMP(0));
  FOCA: return min(10, LOAD_TEMP(0));
  GOOD: return min(10, LOAD_TEMP(0));
  MNSP: return min(10, LOAD_TEMP(0));
  POWR: return min(10, LOAD_TEMP(0));
  TYRE: return min(10, LOAD_TEMP(0));
  VBOD: return min(10, LOAD_TEMP(0));
  VENG: return min(10, LOAD_TEMP(0));
  VPTS: return min(10, LOAD_TEMP(0));
// --- Piece cargoes - Vehicles
  VEHI: return min(5, LOAD_TEMP(0));
// --- Hopper cargos
// ----- Hopper cargos - Fertilizer
//   NITR,
// ----- Hopper cargos - Cement
//   ALO_,
//   BDMT,
//   CBLK,
//   CMNT,
//   KAOL,
//   POTA,
//   QLME,
//   SASH,
// ----- Hopper cargos - Grains
  CERE: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  CTCD: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  GRAI: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  MAIZ: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  OLSD: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  TOFF: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  WHEA: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
// --- Liquid cargoes
// ----- Liquid cargoes - Edibles
//   BEER,
//   COLA,
//   EOIL,
//   FZDR,
//   WATR,
// ----- Liquid cargoes - Oil products
//   OIL_,
//   PETR,
//   RFPR,
// ----- Liquid cargoes - Chemicals
//   BUBL,
//   COAT,
//   DYES,
//   NHNO,
//   PLAS,
//   PLST,
//   RUBR,
//   SOAP,
// ----- Liquid cargoes - Dangerous & heated
//   ACID,
//   CTAR,
//   LYE_,
// ----- Liquid cargoes - Liquified gases
//   C2H4,
//   CHLO,
//   FUEL,
//   H2__,
//   N7__,
//   NH3_,
//   O2__,
// --- Refregirated cargoes
//   FISH,
//   FOOD,
//   FRUI,
//   FRUT,
//   FRVG,
//   MILK,
// --- Boxcar cargoes
// ----- Boxcar cargoes - Sacks
//   BEAN,
//   CASS,
//   FICR,
//   JAVA,
//   NUTS,
//   RSGR,
//   SGBT,
//   SGCN,
//   SUGR,
//   SWET,
//   WOOL,
// ----- Boxcar cargoes - Boxes
//   BOOM,
//   CERA,
//   GLAS,
//   PAPR,
//   PPAR,
  TOYS: return min(10, LOAD_TEMP(0));
// ----- Boxcar cargoes - Livestock
//   LVST,
// --- Special cargoes
// ----- Special cargoes - Valuables & Mail
//   DIAM,
//   GOLD,
//   MAIL,
//   VALU,
// ----- Special cargoes - Passengers
// ------- Special cargoes - Passengers 1 class
//   TOUR,
// ------- Special cargoes - Passengers 2 class
//   PASS,
// ------- Special cargoes - Passengers 3 class
//   YETI,
//   YETY,
// ----- Special cargoes - Nuclear
//   NWST,
//   URAN,
// end main block
        return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(0));
}

switch (FEAT_TRAINS, SELF, all_wagons_bulk_loading_speed2,
  cargo_type_in_veh)  // возможность использования люков - неприменимо
{
  cargo_check_piecelist(all_wagons_bulk_station_loading_speed)
  cargo_check_special_piecelist(all_wagons_bulk_station_loading_speed)
  cargo_check_large_boxeslist(all_wagons_bulk_station_loading_speed)
  cargo_check_vehicles(all_wagons_bulk_station_loading_speed)
  cargo_check_clays_bulklist(all_wagons_bulk_station_loading_speed)
  return LOAD_TEMP(1);
}

switch (FEAT_TRAINS, SELF, all_wagons_bulk_loading_speed1,
[ STORE_TEMP((LOAD_TEMP(1) == 0) + LOAD_TEMP(1), 1),                    // интерпритируем 0 как 1
  STORE_TEMP(min((LOAD_TEMP(3) == 0) * 255 + LOAD_TEMP(3), 255), 3),    // интерпритируем 0 как 255
  STORE_TEMP(min(cargo_capacity / LOAD_TEMP(1) + 1, LOAD_TEMP(3)), 1),  // переводим тики в 1 груза, берем минимум по объёму и тикам
  vehicle_is_unloading])
{
  1: all_wagons_bulk_loading_speed2;
     all_wagons_bulk_station_loading_speed;
}

switch (FEAT_TRAINS, SELF, all_wagons_bulk_loading_speed,
[ STORE_TEMP((LOAD_TEMP(0) == 0) + LOAD_TEMP(0), 0),                    // интерпритируем 0 как 1
  STORE_TEMP(min((LOAD_TEMP(2) == 0) * 255 + LOAD_TEMP(2), 255), 2),    // интерпритируем 0 как 255
  STORE_TEMP(min(cargo_capacity / LOAD_TEMP(0) + 1, LOAD_TEMP(2)), 0),  // переводим тики в 1 груза, берем минимум по объёму и тикам
  (LOAD_TEMP(1) == 0) && (LOAD_TEMP(3) == 0)])                          // Глуходонные вагоны, выгрузка сваливанием не допускается, считается по скорости погрузки
{
  1: all_wagons_bulk_station_loading_speed;
     all_wagons_bulk_loading_speed1;
}
